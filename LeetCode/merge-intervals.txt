https://leetcode.com/problems/merge-intervals/

Solution:

class Solution {
    public int[][] merge(int[][] intervals) {
        if (intervals.length <= 1)
            return intervals;
        Arrays.sort(intervals, (a, b) -> Integer.compare(a[0], b[0]));

        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();

        int[] check = intervals[0];

        for (int i = 1; i < intervals.length; i++) {
            int[] current = intervals[i];
            if (doIntervalsOverlap(check, current)) {
                check[0] = Math.min(check[0], current[0]);
                check[1] = Math.max(check[1], current[1]);
            } else {
                map.put(check[0], check[1]);
                check = current;
            }

            if (i == intervals.length - 1) {
                map.put(check[0], check[1]);
            }
        }

        int[][] result = new int[map.size()][2];

        int count = 0;
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            result[count][0] = entry.getKey();
            result[count][1] = entry.getValue();
            ++count;
        }

        return result;
    }

    private boolean doIntervalsOverlap(int[] interval_1, int[] interval_2) {
        return interval_1[1] >= interval_2[0];
    }
}