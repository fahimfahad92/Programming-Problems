https://leetcode.com/problems/k-th-smallest-prime-fraction

class Solution {
    public int[] kthSmallestPrimeFraction(int[] arr, int k) {

        PriorityQueue<Data> pq = new PriorityQueue<Data>(k, new OurCustomComparator());

        for (int i = arr.length - 1; i > 0; i--) {
            for (int j = 0; j < i; j++) {
                pq.add(new Data(arr[j], arr[i]));
            }
        }

        while (k > 1) {
            pq.poll();
            --k;
        }

        int[] res = new int[2];
        Data data = pq.poll();
        res[0] = data.val1;
        res[1] = data.val2;

        return res;
    }
}

class Data {
    public int val1;
    public int val2;
    public float fraction;

    public Data(int val1, int val2) {
        this.val1 = val1;
        this.val2 = val2;
        this.fraction = (float) val1 / (float) val2;
    }
}

class OurCustomComparator implements Comparator<Data> {
    public int compare(Data s1, Data s2) {
        if (s1.fraction < s2.fraction)
            return -1;
        else if (s1.fraction > s2.fraction)
            return 1;
        return 0;
    }
}