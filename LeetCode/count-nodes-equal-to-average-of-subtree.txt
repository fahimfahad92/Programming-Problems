Problem: https://leetcode.com/problems/count-nodes-equal-to-average-of-subtree/description/

Solution:

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */
class Solution {
    int result = 0;
    int count = 0;

    public int averageOfSubtree(TreeNode root) {
        processNode(root);
        return result;
    }

    private void processNode(TreeNode node) {
        if (node == null) {
            return;
        }
        int sum = calculateSum(node, 0);
        int avg = sum / count;
        checkWithAvg(node, avg);

        count = 0;
        processNode(node.left);
        count = 0;
        processNode(node.right);
    }

    private void checkWithAvg(TreeNode node, int avg) {
        if (node.val == avg) {
            ++result;
            return;
        }
    }

    private int calculateSum(TreeNode node, int sum) {
        if (node == null) {
            return sum;
        }
        ++count;

        sum = sum + node.val;
        sum = calculateSum(node.left, sum);
        sum = calculateSum(node.right, sum);

        return sum;
    }
}