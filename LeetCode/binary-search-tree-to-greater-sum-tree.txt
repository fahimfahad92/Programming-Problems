https://leetcode.com/problems/binary-search-tree-to-greater-sum-tree/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 * int val;
 * TreeNode left;
 * TreeNode right;
 * TreeNode() {}
 * TreeNode(int val) { this.val = val; }
 * TreeNode(int val, TreeNode left, TreeNode right) {
 * this.val = val;
 * this.left = left;
 * this.right = right;
 * }
 * }
 */
class Solution {
    public TreeNode bstToGst(TreeNode root) {
        Set<Integer> values = new TreeSet<Integer>();

        Stack<TreeNode> stack = new Stack<TreeNode>();
        if (root == null) {
            return root;
        }

        stack.push(root);
        int totalSum = 0;
        TreeNode node;
        while (!stack.isEmpty()) {
            node = stack.pop();

            values.add(node.val);
            totalSum += node.val;
            if (node.left != null) {
                stack.push(node.left);
            }

            if (node.right != null) {
                stack.push(node.right);
            }
        }

        node = root;
        stack.push(node);
        int nodeVal = 0;
        while (!stack.isEmpty()) {
            node = stack.pop();
            nodeVal = totalSum;
            for (Integer val : values) {
                if (val < node.val) {
                    nodeVal = nodeVal - val;
                } else if (node.val == val) {
                    node.val = nodeVal;
                    break;
                }
            }

            if (node.left != null) {
                stack.push(node.left);
            }

            if (node.right != null) {
                stack.push(node.right);
            }
        }
        return root;
    }
}